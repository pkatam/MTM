/* 
* Copyright (c) 2019 and Confidential to Carefirst All rights reserved.  
*/ 

buildscript {
	repositories {
		maven {
			url "https://plugins.gradle.org/m2/"
		}
		// maven {
		// 	url "${System.env.ARTIFACTORY_URL}/repo"
		// }
	}
	dependencies {
		classpath "org._10ne.gradle:rest-gradle-plugin:0.4.2"
		classpath "org.jfrog.buildinfo:build-info-extractor-gradle:3.1.1"
	}
}

plugins {
	id "de.undercouch.download" version "3.2.0"
}

apply plugin: "base"
apply plugin: 'maven-publish'
apply plugin: "org.tenne.rest"
apply plugin: "com.jfrog.artifactory"

import com.CF.CICD.ResultHandler
import com.pega.pw2017.FileFinder
import de.undercouch.gradle.tasks.download.Download
import groovy.util.XmlSlurper
import groovy.xml.XmlUtil
import groovy.io.FileType
import java.io.File
import static groovyx.net.http.ContentType.XML
// Import the ANT targets defined in prpcServiceUtils for application import and export
ant.importBuild 'prpcServiceUtils/scripts/utils/prpcServiceUtilsWrapper.xml'

ext {
	resultHandler = new ResultHandler(project)
}

// Define properties to be used later in later tasks
def buildNumber = findProperty("buildNumber") ?:System.env.BUILD_NUMBER
def applicationName = findProperty("applicationName") ?:defaultApplicationName
//"DevOps"
//findProperty("applicationName") ?:defaultApplicationName
def applicationVersion = findProperty("applicationVersion") ?:defaultApplicationVersion
def artifactVersion = findProperty("artifactVersion") ?:applicationVersion + '_' + buildNumber
def artifactoryURL = findProperty("artifactoryURL") ?:System.env.ARTIFACTORY_URL
def artifactorGroup = findProperty("artifactoryGroup") ?:defaultArtifactoryGroup
def artifactoryRepoKey = "Pega_PDM"
def productName
def productVersion
//findProperty("artifactoryRepoKey") ?:defaultArtifactoryRepoKey
//def archiveName = "${applicationName}_${applicationVersion}"
def archiveName = "${productName}_${productVersion}"
def archiveNameWithExt = "${archiveName}.zip"
//def artifactLocation = findProperty("artifactoryLocation") ?:"${artifactoryURL}/${artifactoryRepoKey}/${artifactorGroup}/${applicationName}/${artifactVersion}/${applicationName}-${applicationVersion}_${buildNumber}.zip"
def artifactLocation = findProperty("artifactoryLocation") ?:"${artifactoryURL}/product/${applicationName}_${artifactVersion}/ExportWizard/${archiveName}"
//def artifactLocation="http://svl-jbuild-d1:8091/artifactory/Pega_PDM/product/DevOps_Export_01-01-01/ExportWizard/TestToday.zip"
//def artifactLocation = "http://svl-jbuild-d1:8091/artifactory/Pega_PDM/branch/TestDevOps4/ExportWizard/TestDevOps4_20180925T004514_GMT.jar"
//replace https with http since the download location does not require sign in
artifactLocation = artifactLocation.replaceAll(/^https\:/, 'http:')
def exportAsyncSetting = findProperty("exportAsyncSetting") ?:defaultExportAsyncSetting
def importAsyncSetting = findProperty("exportAsyncSetting") ?:defaultImportAsyncSetting

group = artifactorGroup
version = artifactVersion

def exportFolder = ""
println "BuildDir: ${buildDir}"
//findProperty("exportFolder")?: FileFinder.insureDirectoryExists("${buildDir}/export")
def importFolder = findProperty("importFolder")?: FileFinder.insureDirectoryExists("${buildDir}/import")

// Define ANT properties for the target defined in prpcServiceUtils
//ant.properties['export.applicationName'] = applicationName
//ant.properties['export.applicationVersion'] = applicationVersion
//ant.properties['export.archiveName'] = archiveNameWithExt
ant.properties['service.responseartifacts.dir'] = exportFolder
ant.properties['export.async']=exportAsyncSetting
ant.properties['import.async']=importAsyncSetting
ant.properties['import.archive.path']=importFolder


println "\nBuildNumber : ${buildNumber}"
println "applicationName : ${applicationName}"
println "applicationVersion : ${applicationVersion}"
println "artifactVersion : ${artifactVersion}"
println "artifactoryURL : ${artifactoryURL}"
println "artifactorGroup : ${artifactorGroup}"
println "artifactoryRepoKey : ${artifactoryRepoKey}"
println "archiveName : ${archiveName}"
println "archiveNameWithExt : ${archiveNameWithExt}"
println "artifactLocation : ${artifactLocation}"
println "exportAsyncSetting : ${exportAsyncSetting}"
println "importAsyncSetting : ${importAsyncSetting}"
publishing {
	publications {
		main(MavenPublication) {
			artifact file(FileFinder.findFile(exportFolder, archiveNameWithExt))
		}
	}
}



task executePegaUnitTests(type: org._10ne.gradle.rest.RestTask) {
	group 'Pega'
	description 'Execute PegaUnit tests'
	productName = findProperty('productName')
	productVersion = findProperty('productVersion')
	def targetURL = findProperty('targetURL')
	def accessGroup = findProperty('accessGroup') ?:project.defaultAccessGroup
	def testSuite = findProperty('testSuite') ? '':project.smokeTestSuite
	def testResultLocation = findProperty('testResultLocation') ?:System.getProperty("user.dir")
	//testResultLocation = "/var/lib/jenkins/workspace/PDMPipelineOld10_master-5TBLQVUTL4X4U733FUJ5V7I5ZIKD2I3GWOK7AO4NAXUZVC6FFPBQ"
	def testResultFile = findProperty('testResultFile') ?:project.testResultFile
	File testResultFileHandle
	if (testResultLocation != null) {
		testResultFileHandle = new File("${testResultLocation}/${testResultFile}")
	}
	else {
		testResultFileHandle = new File("${testResultFile}")	
	}
	//create the file
	testResultFileHandle.createNewFile()

    println "\nTest result file location - ${testResultFileHandle.absolutePath}"
    testSuite= "CAREFIRST-PROVIDER-PINCIM-WORK-SANCTIONS!TS_SANCTIONS"
        //accessGroup = "PINCIM_PDM_PegaScrum:Administrators"
	accessGroup = "PINCIM:Administrators"
	uri = "http://svl-pgwasdb-d1:9101/pdmodevb/PRRestService/PegaUnit/Rule-Test-Unit-Case/pzExecuteTests?TestSuiteID=${java.net.URLEncoder.encode(testSuite, "UTF-8")}"
        println "uri = ${uri}"	
	// Add the access group if it is specified
	if (accessGroup != null) {
		uri = "${uri}&AccessGroup=${java.net.URLEncoder.encode(accessGroup, "UTF-8")}"
	}

	username = findProperty('pegaUsername')
	password = findProperty('pegaPassword')
	//username = "puneeth_dops"
	//password = "rules"

	httpMethod = 'post'
	contentType = 'text'

	responseHandler = { response ->
		println "Successful test execution. Results are stored at : ${testResultFile.toString()} \n"
		if (response != null) {
			println "Test Results : ${response.toString()}"
		}
		//testResultFileHandle.write "${response.toString()}"
                    testResultFileHandle.write("${response}", "UTF-8")
		
		}

			
	doFirst {
		// Validate project properties
		for(Map.Entry p: project.getProperties()) {
		            println p;
			            }
		if (!project.hasProperty('targetURL')) {
			throw new InvalidUserDataException("Must supply '-PtargetURL'")
		}
	}
}

task sendUpdateToPega(type: org._10ne.gradle.rest.RestTask) {
        def appname = findProperty('pegaAppName')
	def appversion = findProperty('pegaAppVersion')
	def buildStatus = findProperty('buildStatus')
	def testres = "${testResultFile.toString()}"
	testres = "${java.net.URLEncoder.encode(testResultFile, "UTF-8")}"
	def dateflag = findProperty('DateFlag')
	def stagename = findProperty('StageName')
	def startdate = findProperty('StartDate')
	def enddate = findProperty('EndDate')
	println "$testres"
	startdate='01/29/2019'
	enddate='01/29/2019'
	uri = "http://svl-pgwasda-d1:9084/paddeva/PRRestService/CICDRestServices/build/build?appname=${appname}&appversion=${appversion}&buildno=${buildNumber}&startdate=${startdate}&enddate=${enddate}&currentstatus=${buildStatus}&utloc=${testres}&nextbuildno=2&stagename=${stagename}&DateFlag=${dateflag}"
        println "${uri}"
	httpMethod = 'post'
        contentType = 'TEXT'
        responseHandler = { response ->
	println "call 1\n"
	if (response != null) {
	println "suceess"
	           }
        }





}
task fetchFromArtifactory(type: Download) {
        group 'Pega'
	description 'Fetch application archive from artifactory'
	// fetch all files in this folder
	println "Bence: current files in importfolder:"
	 def productname = findProperty('productName')
        println "ProductName: ${productName}"
	 def productversion = findProperty('productVersion')
	 
	 archiveName = "${productname}-${productversion}-${buildNumber}.zip"
         println "Archive Name is : ${archiveName}"
	 artifactLocation = findProperty("artifactoryLocation") ?:"${artifactoryURL}/product/${productname}_${productversion}/ExportWizard/${archiveName}"
	def list = []
	def dir = new File(importFolder)
	dir.eachFileRecurse (FileType.FILES) {
	file ->
	                list << file
	}
	// print all files in folder
	list.each {
	println it.path
	}
	doFirst {
	                println 'First clean out import folder on the Jenkins system' +importFolder
		        File folder = new File(importFolder)
		        folder.eachFileRecurse(FileType.FILES) {
		             file ->
		             file.delete()
		                    	                      }
	        }
                 println 'Downloading artifact from : ' + artifactLocation
                 src artifactLocation
                 username artifactoryUser
                 password artifactoryPassword
                 dest importFolder
	      }


